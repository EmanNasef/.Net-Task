// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using MyTask.Models;

#nullable disable

namespace MyTask.Data
{
    public partial class MytaskContext : DbContext
    {
        public MytaskContext()
        {
        }

        public MytaskContext(DbContextOptions<MytaskContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Calender> Calender { get; set; }
        public virtual DbSet<Contacts> Contacts { get; set; }
        public virtual DbSet<Notes> Notes { get; set; }
        public virtual DbSet<Tasks> Tasks { get; set; }
        public virtual DbSet<User> User { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=DESKTOP-D72LKLU\\SQLEXPRESS;Initial Catalog=MyTask;Integrated Security=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS");

            modelBuilder.Entity<Calender>(entity =>
            {
                entity.HasOne(d => d.User)
                    .WithMany(p => p.Calender)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Calender_User");
            });

            modelBuilder.Entity<Contacts>(entity =>
            {
                entity.HasOne(d => d.User)
                    .WithMany(p => p.Contacts)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Contacts_User");
            });

            modelBuilder.Entity<Notes>(entity =>
            {
                entity.HasOne(d => d.User)
                    .WithMany(p => p.Notes)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Notes_User");
            });

            modelBuilder.Entity<Tasks>(entity =>
            {
                entity.HasOne(d => d.User)
                    .WithMany(p => p.Tasks)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Tasks_User");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}